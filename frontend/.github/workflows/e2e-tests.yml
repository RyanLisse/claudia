name: E2E Tests with Playwright and Stagehand

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: '${{ github.workspace }}/playwright-browsers'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npx playwright install --with-deps ${{ matrix.project }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Setup test environment
        run: |
          cd frontend
          cp .env.example .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000" >> .env
          echo "NEXT_PUBLIC_WS_URL=ws://localhost:3000" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Start application server
        run: |
          cd frontend
          npm run dev &
          sleep 30
          # Wait for server to be ready
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test --project=${{ matrix.project }} --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.project }}-shard-${{ matrix.shard }}
          PLAYWRIGHT_JUNIT_OUTPUT_FILE: test-results/junit-${{ matrix.project }}-shard-${{ matrix.shard }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.project }}-shard-${{ matrix.shard }}
          path: |
            frontend/test-results/
            frontend/playwright-report-${{ matrix.project }}-shard-${{ matrix.shard }}/
          retention-days: 30

      - name: Upload trace files
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: traces-${{ matrix.project }}-shard-${{ matrix.shard }}
          path: frontend/test-results/trace-*.zip
          retention-days: 7

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-reports-${{ matrix.project }}-shard-${{ matrix.shard }}
          path: frontend/test-results/accessibility-*.json
          retention-days: 30

  accessibility-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cd frontend
          cp .env.example .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Start application server
        run: |
          cd frontend
          npm run dev &
          sleep 30
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        run: |
          cd frontend
          npx playwright test --grep "accessibility" --project=chromium
        env:
          PLAYWRIGHT_HTML_REPORT: accessibility-report

      - name: Generate accessibility summary
        run: |
          cd frontend
          node scripts/generate-accessibility-summary.js

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: |
            frontend/accessibility-report/
            frontend/accessibility-summary.json
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cd frontend
          cp .env.example .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Start application server
        run: |
          cd frontend
          npm run dev &
          sleep 30
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: |
          cd frontend
          npx playwright test --grep "performance" --project=chromium
        env:
          PLAYWRIGHT_HTML_REPORT: performance-report

      - name: Generate performance summary
        run: |
          cd frontend
          node scripts/generate-performance-summary.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            frontend/performance-report/
            frontend/performance-summary.json
          retention-days: 30

  visual-regression-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cd frontend
          cp .env.example .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Start application server
        run: |
          cd frontend
          npm run dev &
          sleep 30
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: |
          cd frontend
          npx playwright test --grep "visual-regression" --project=chromium --update-snapshots
        env:
          PLAYWRIGHT_HTML_REPORT: visual-regression-report

      - name: Upload visual regression results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-regression-results
          path: |
            frontend/visual-regression-report/
            frontend/test-results/visual-regression-*
          retention-days: 30

  test-report:
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests, performance-tests, visual-regression-tests]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate consolidated report
        run: |
          cd frontend
          node scripts/generate-consolidated-report.js ../artifacts

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-test-report
          path: |
            frontend/consolidated-report/
            frontend/test-summary.json
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const summaryPath = path.join(process.cwd(), 'frontend', 'test-summary.json');
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              
              const comment = `
              ## E2E Test Results 🚀
              
              **Overall Status**: ${summary.status === 'passed' ? '✅ PASSED' : '❌ FAILED'}
              
              ### Test Summary
              - **Total Tests**: ${summary.totalTests}
              - **Passed**: ${summary.passedTests} ✅
              - **Failed**: ${summary.failedTests} ❌
              - **Skipped**: ${summary.skippedTests} ⏭️
              
              ### Accessibility Score
              - **WCAG 2.1 AA Compliance**: ${(summary.accessibility.wcagCompliance * 100).toFixed(1)}%
              - **Keyboard Navigation**: ${(summary.accessibility.keyboardNavigation * 100).toFixed(1)}%
              - **Screen Reader Support**: ${(summary.accessibility.screenReaderSupport * 100).toFixed(1)}%
              - **Color Contrast**: ${(summary.accessibility.colorContrast * 100).toFixed(1)}%
              
              ### Performance Metrics
              - **First Contentful Paint**: ${summary.performance.fcp}ms
              - **Largest Contentful Paint**: ${summary.performance.lcp}ms
              - **Cumulative Layout Shift**: ${summary.performance.cls}
              - **Time to Interactive**: ${summary.performance.tti}ms
              
              ### Visual Regression
              - **Visual Tests**: ${summary.visualRegression.totalTests}
              - **Visual Differences**: ${summary.visualRegression.differences}
              - **New Screenshots**: ${summary.visualRegression.newScreenshots}
              
              [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error posting comment:', error);
            }

      - name: Set status check
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const summaryPath = path.join(process.cwd(), 'frontend', 'test-summary.json');
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              
              const state = summary.status === 'passed' ? 'success' : 'failure';
              const description = `${summary.passedTests}/${summary.totalTests} tests passed`;
              
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: state,
                description: description,
                context: 'E2E Tests'
              });
            } catch (error) {
              console.log('Error setting status:', error);
            }

  deploy-preview:
    runs-on: ubuntu-latest
    needs: test-report
    if: github.event_name == 'pull_request' && needs.test-report.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Deploy to preview environment
        run: |
          echo "Deploying to preview environment..."
          # Add your deployment logic here
          # For example: vercel, netlify, or custom deployment

      - name: Update PR with preview link
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `
            ## 🚀 Preview Deployment
            
            Your changes have been deployed to a preview environment!
            
            **Preview URL**: https://preview-pr-${{ github.event.number }}.your-domain.com
            
            This preview includes:
            - ✅ All E2E tests passed
            - ✅ Accessibility compliance verified
            - ✅ Performance benchmarks met
            - ✅ Visual regression tests passed
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests, performance-tests, visual-regression-tests]
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const retentionDays = 30;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }