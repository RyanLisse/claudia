name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Changes in this Release
            - Automated release for version ${{ steps.get_version.outputs.version }}
            
            ## Download
            
            Choose the appropriate binary for your operating system:
            - **Windows**: `.exe` file
            - **macOS**: `.dmg` or `.app.tar.gz` file  
            - **Linux**: `.AppImage` or `.deb` file

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: claudia
            asset_name: claudia-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: claudia.exe
            asset_name: claudia-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: claudia
            asset_name: claudia-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: claudia
            asset_name: claudia-macos-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.18

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            ~/.bun/install/cache
            frontend/node_modules
            node_modules
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-bun-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        run: |
          bun install
          cd frontend && bun install

      - name: Build release
        run: bun run tauri build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release-artifacts
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.deb" -exec cp {} release-artifacts/ \;
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.AppImage" -exec cp {} release-artifacts/ \;

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release-artifacts
          Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle" -Recurse -Include "*.exe", "*.msi" | Copy-Item -Destination "release-artifacts"

      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release-artifacts
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" -exec cp {} release-artifacts/ \;
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.app" -exec tar -czf release-artifacts/{}.tar.gz {} \;

      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release-artifacts/*
          asset_name: claudia-${{ needs.create-release.outputs.version }}-${{ matrix.target }}
          asset_content_type: application/octet-stream

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: github.repository == 'username/claudia' # Replace with your repo
    
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: claudia
          formula-path: Formula/claudia.rb
          homebrew-tap: username/homebrew-tap # Replace with your tap
          download-url: https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/claudia-${{ needs.create-release.outputs.version }}-x86_64-apple-darwin.tar.gz
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  notify-release:
    name: Notify Release
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.build-and-upload.result == 'success' }}
        run: |
          echo "üéâ Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "üì¶ Artifacts uploaded to GitHub Releases"

      - name: Notify failure
        if: ${{ needs.build-and-upload.result == 'failure' }}
        run: |
          echo "‚ùå Release ${{ needs.create-release.outputs.version }} failed!"
          exit 1