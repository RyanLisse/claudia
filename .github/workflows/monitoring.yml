name: Monitoring & Alerting

on:
  schedule:
    # Run monitoring checks every hour
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  uptime-check:
    name: Uptime Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Check application health
        run: |
          echo "🔍 Checking application health..."
          
          # Check if application is responding
          if curl -f -s --max-time 30 "${{ secrets.APP_URL }}/health" > /dev/null; then
            echo "✅ Application is healthy"
          else
            echo "❌ Application health check failed"
            exit 1
          fi

      - name: Check API endpoints
        run: |
          echo "🔍 Checking API endpoints..."
          
          # Test critical API endpoints
          ENDPOINTS=(
            "${{ secrets.APP_URL }}/api/health"
            "${{ secrets.APP_URL }}/api/status"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            if curl -f -s --max-time 10 "$endpoint" > /dev/null; then
              echo "✅ $endpoint is responding"
            else
              echo "❌ $endpoint is not responding"
              exit 1
            fi
          done

      - name: Performance check
        run: |
          echo "⚡ Running performance check..."
          
          # Measure response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${{ secrets.APP_URL }}")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Alert if response time > 5 seconds
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${RESPONSE_TIME}s"
            exit 1
          fi

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Check for security alerts
        run: |
          echo "🔒 Checking for security alerts..."
          
          # Check SSL certificate expiry
          SSL_EXPIRY=$(echo | openssl s_client -servername ${{ secrets.DOMAIN }} -connect ${{ secrets.DOMAIN }}:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
          SSL_EXPIRY_EPOCH=$(date -d "$SSL_EXPIRY" +%s)
          CURRENT_EPOCH=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
          
          echo "SSL certificate expires in $DAYS_UNTIL_EXPIRY days"
          
          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "⚠️ SSL certificate expires soon!"
            exit 1
          fi

      - name: Check for failed login attempts
        run: |
          echo "🔍 Checking for security anomalies..."
          # Add your security monitoring logic here
          # This could include checking logs, failed attempts, etc.

  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.18

      - name: Check for outdated dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."
          
          cd frontend
          bun install
          
          # Check for outdated packages
          OUTDATED=$(bun outdated --json 2>/dev/null || echo "[]")
          
          if [ "$OUTDATED" != "[]" ]; then
            echo "⚠️ Outdated dependencies found:"
            echo "$OUTDATED" | jq '.'
          else
            echo "✅ All dependencies are up to date"
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "🔒 Checking for security vulnerabilities..."
          
          cd frontend
          
          # Run audit
          if bun audit --audit-level moderate; then
            echo "✅ No security vulnerabilities found"
          else
            echo "❌ Security vulnerabilities detected"
            exit 1
          fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Lighthouse CI
        run: |
          echo "⚡ Running Lighthouse performance test..."
          
          # Install Lighthouse CI
          npm install -g @lhci/cli@0.12.x
          
          # Run Lighthouse test
          lhci healthcheck --url "${{ secrets.APP_URL }}"
          
          # Run full audit
          lhci collect --url "${{ secrets.APP_URL }}" --numberOfRuns 1
          
          # Analyze results
          lhci assert

      - name: Load testing
        run: |
          echo "🔄 Running load test..."
          
          # Install k6
          curl -s https://github.com/grafana/k6/releases/latest/download/k6-linux-amd64.tar.gz | tar -xz
          sudo mv k6-*/k6 /usr/local/bin/
          
          # Run basic load test
          cat > load-test.js << EOF
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            vus: 10,
            duration: '30s',
          };
          
          export default function() {
            let response = http.get('${{ secrets.APP_URL }}');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 2000ms': (r) => r.timings.duration < 2000,
            });
            sleep(1);
          }
          EOF
          
          k6 run load-test.js

  alert-on-failure:
    name: Alert on Failure
    runs-on: ubuntu-latest
    needs: [uptime-check, security-monitoring, dependency-monitoring, performance-monitoring]
    if: failure()
    
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"🚨 Monitoring Alert\",
              \"attachments\": [{
                \"color\": \"danger\",
                \"fields\": [{
                  \"title\": \"Repository\",
                  \"value\": \"${{ github.repository }}\",
                  \"short\": true
                }, {
                  \"title\": \"Workflow\",
                  \"value\": \"${{ github.workflow }}\",
                  \"short\": true
                }, {
                  \"title\": \"Status\",
                  \"value\": \"Failed\",
                  \"short\": true
                }, {
                  \"title\": \"Run\",
                  \"value\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                  \"short\": false
                }]
              }]
            }" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Send email notification
        if: ${{ secrets.EMAIL_WEBHOOK_URL }}
        run: |
          curl -X POST "${{ secrets.EMAIL_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"to\": \"${{ secrets.ALERT_EMAIL }}\",
              \"subject\": \"🚨 Claudia Monitoring Alert\",
              \"body\": \"Monitoring checks failed for ${{ github.repository }}. Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

  generate-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [uptime-check, security-monitoring, dependency-monitoring, performance-monitoring]
    if: always()
    
    steps:
      - name: Generate status report
        run: |
          echo "📊 Monitoring Report - $(date)" > monitoring-report.md
          echo "=========================" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "## Status Summary" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "- Uptime Check: ${{ needs.uptime-check.result }}" >> monitoring-report.md
          echo "- Security Monitoring: ${{ needs.security-monitoring.result }}" >> monitoring-report.md
          echo "- Dependency Monitoring: ${{ needs.dependency-monitoring.result }}" >> monitoring-report.md
          echo "- Performance Monitoring: ${{ needs.performance-monitoring.result }}" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "## Workflow Details" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "- Repository: ${{ github.repository }}" >> monitoring-report.md
          echo "- Run ID: ${{ github.run_id }}" >> monitoring-report.md
          echo "- Triggered by: ${{ github.event_name }}" >> monitoring-report.md
          echo "- Timestamp: $(date -u)" >> monitoring-report.md
          
          cat monitoring-report.md

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_id }}
          path: monitoring-report.md
          retention-days: 30